import telebot
from function import ad_user_search, add_user_base, user_fullname_search, chat_id_search,jira_login,create_ticket_jira, my_bot, jira_login, add_comment_to_jira_ticket
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

jira = jira_login()
bot = my_bot

markup = InlineKeyboardMarkup()

button_ticket = InlineKeyboardButton('–°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç –≤ HD', callback_data='create_ticket')
button_issues = InlineKeyboardButton('–ú–æ–∏ –Ω–µ—Ä–µ—à–µ–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã', callback_data='my_issues')

markup.row(button_ticket)
markup.row(button_issues)

@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    try:
        if call.data == 'create_ticket':
            create_task(call.message)
        elif call.data == 'my_issues':
            handle_my_issues_command(bot, call.message)
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

def handle_my_issues_command(bot, message):
    try:
        chat_id = message.chat.id
        if not chat_id_search(chat_id):
            my_bot.send_message(chat_id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
            return
        fullname = user_fullname_search(chat_id)  # –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = ad_user_search(fullname)  # –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ Active Directory
        issues = jira.search_issues("assignee = {} AND resolution = Unresolved".format(user.email))  # –∏—â–µ–º –∑–∞–¥–∞—á–∏, –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–µ –∑–∞–∫—Ä—ã—Ç—ã–µ
        if not issues:
            bot.send_message(chat_id, "–£ –í–∞—Å –Ω–µ—Ç –Ω–µ—Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.")
        else:
            for issue in issues:
                bot.send_message(chat_id, f"–ó–∞–¥–∞—á–∞ {issue.key}: {issue.fields.summary}")
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id
    first_name = message.from_user.first_name
    bot.send_message(chat_id, f"–ü—Ä–∏–≤–µ—Ç, {first_name}! –≠—Ç–æ –±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ WiseAdvice.\n–Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø–æ–º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç –≤ Help_Desk.\n–ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /my_issues
@bot.message_handler(commands=['my_issues'])
def handle_my_issues(message):
    handle_my_issues_command(bot, message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_comment
@bot.message_handler(commands=['add_comment'])
def add_comment(message):
    chat_id = message.chat.id
    if not chat_id_search(chat_id):
        my_bot.send_message(chat_id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        return
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏:")
    bot.register_next_step_handler(message, add_comment_description)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥'
@bot.callback_query_handler(func=lambda call: call.data == 'back_to_menu')
def back_to_menu_callback(call):
    chat_id = call.message.chat.id
    first_name = call.from_user.first_name
    bot.send_message(chat_id, f"–ü—Ä–∏–≤–µ—Ç, {first_name}! –≠—Ç–æ –±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ WiseAdvice.\n–Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø–æ–º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç –≤ Help_Desk.\n–ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=markup)

def add_comment_description(message):
    chat_id = message.chat.id
    if not chat_id_search(chat_id):
        my_bot.send_message(chat_id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        return
    issue_key = message.text
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:")
    bot.register_next_step_handler(message, add_comment_text, issue_key)

def add_comment_text(message, issue_key):
    chat_id = message.chat.id
    if not chat_id_search(chat_id):
        my_bot.send_message(chat_id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        return
    comment_text = message.text
    if add_comment_to_jira_ticket(issue_key, comment_text):
        my_bot.send_message(chat_id, f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π '{comment_text}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∑–∞–¥–∞—á—É {issue_key}")
    else:
        my_bot.send_message(chat_id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –∑–∞–¥–∞—á—É {issue_key}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

def access(message):
    code_access = message.text
    if code_access == '–î–æ—Å—Ç—É–ø02':
        bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏ —Å–≤–æ–µ –∏–º—è: ")
        bot.register_next_step_handler(message, first_names)
    else:
        bot.send_message(message.chat.id, f"–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!")
        bot.register_next_step_handler(message, access)

def first_names(message):
    global first_name
    first_name = message.text
    bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é: ")
    bot.register_next_step_handler(message, last_names)

def last_names(message):
    global last_name
    last_name = message.text
    fullname = last_name + ' ' + first_name
    if ad_user_search(fullname) == False:
        bot.send_message(message.chat.id, f'–¢–∞–∫–∏—Ö –Ω–µ—Ç –≤ –Ω–∞—à–∏—Ö –º–µ—Å—Ç–∞—Ö. \n–í–≤–µ–¥–∏ —Å–≤–æ–µ –∏–º—è: ')
        bot.register_next_step_handler(message, first_names)
    else:
        bot.send_message(message.chat.id, f'–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞!')
        bot.send_message(message.chat.id, f'–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —Å–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /start')
        user = (message.from_user.id, first_name, last_name, ad_user_search(fullname))
        add_user_base(user)
        bot.register_next_step_handler(message, start)

def problem_read(message):
    user = message.from_user.first_name
    text = message.text
    if text == '/create_ticket':
        create_task(message)  # –≤—ã–∑—ã–≤–∞–µ–º create_ticket
    elif text == '/add_comment':
        add_comment(message)  # –≤—ã–∑—ã–≤–∞–µ–º add_comment


@bot.message_handler(commands=['create_ticket'])
def create_task(message):
    chat_id = message.chat.id
    if not chat_id_search(chat_id):
        my_bot.send_message(chat_id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        return
    markup = InlineKeyboardMarkup()
    category_row1 = [InlineKeyboardButton("üåê VPN", callback_data='category_vpn'),
                     InlineKeyboardButton("üìß –ü–æ—á—Ç–∞", callback_data='category_mail'),
                     InlineKeyboardButton("üìû –¢–µ–ª–µ—Ñ–æ–Ω–∏—è", callback_data='category_telephony')]
    category_row2 = [InlineKeyboardButton("üñ• –£–¥–∞–ª–µ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", callback_data='category_remote_conn'),
                     InlineKeyboardButton("ü§î Jira", callback_data='category_jira'),
                     InlineKeyboardButton("üìñ Confluence", callback_data='category_confluence')]
    category_row3 = [InlineKeyboardButton("‚Åà FAQ", callback_data='category_faq'),
                     InlineKeyboardButton("‚úç –î—Ä—É–≥–æ–µ", callback_data='category_other')]
    markup.row(*category_row1)
    markup.row(*category_row2)
    markup.row(*category_row3)
    markup.row(InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data='back_to_menu'))
    my_bot.send_message(chat_id, "–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω—É –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('category_'))
def handle_category_callback(call):
    category = call.data.split('_')[1]
    chat_id = call.message.chat.id
    if category == 'vpn':
        my_bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
        bot.register_next_step_handler(call.message, message, create_task_summary, "")
    elif category == 'mail':
        my_bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
        bot.register_next_step_handler(call.message, message, create_task_summary, "")
    elif category == 'telephony':
        my_bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
        bot.register_next_step_handler(call.message, message, create_task_summary, "")
    elif category == 'remote_conn':
        my_bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
        bot.register_next_step_handler(call.message, message, create_task_summary, "")
    elif category == 'jira':
        my_bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
        bot.register_next_step_handler(call.message, message, create_task_summary, "")
    elif category == 'confluence':
        my_bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
        bot.register_next_step_handler(call.message, message, create_task_summary, "")
    elif category == 'faq':
        my_bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
        bot.register_next_step_handler(call.message, message, create_task_summary, "")
    elif category == 'other':
        my_bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
        bot.register_next_step_handler(call.message, message, create_task_summary, "")


@bot.callback_query_handler(func=lambda call: call.data == 'back_to_menu')
def back_to_menu_callback(call):
    chat_id = call.message.chat.id
    my_bot.send_message(chat_id, "–ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=markup)

def create_task_summary(message, description):
    chat_id = message.chat.id
    if not chat_id_search(chat_id):
        my_bot.send_message(chat_id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        return
    summary_text = message.text
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
    bot.register_next_step_handler(message, create_task_description, summary_text, description)

def create_task_description(message, summary_text, descr_text):
    chat_id = message.chat.id
    if not chat_id_search(chat_id):
        my_bot.send_message(chat_id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        return
    descr_text = message.text
    fullname = user_fullname_search(chat_id)  # –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = ad_user_search(fullname)
    create_ticket_jira(summary_text, fullname, user, descr_text)  # –ø–µ—Ä–µ–¥–∞–µ–º –µ–≥–æ –≤ —Ñ—É–Ω–∫—Ü–∏—é create_ticket_jira()
    last_issue = jira.search_issues("project=HD")[0].key
    bot.send_message(chat_id, f"–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞! –ù–æ–º–µ—Ä: {last_issue}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clear
@bot.message_handler(commands=['clear'])
def clear_chat(message):
    chat_id = message.chat.id
    bot.purge_chat(chat_id)

while True:
    try:
        bot.polling(none_stop=True, interval=0)
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        